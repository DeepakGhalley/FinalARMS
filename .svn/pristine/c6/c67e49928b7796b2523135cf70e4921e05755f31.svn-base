/*
Deployment script for tt_db

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "tt_db"
:setvar DefaultFilePrefix "tt_db"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Procedure [dbo].[rptDefaulterWaterList]...';


GO


Create PROCEDURE [dbo].[rptDefaulterWaterList]
-- @months int , @years int
AS
BEGIN
	SET NOCOUNT ON;	
	SELECT ROW_NUMBER() over(order by(select 1)) as Sl, wc.consumerNo as ConsumerNo, wc.waterMeterNo as WaterMeterNo, w.billingAddress as BillingAddress,
	sum(d.totalAmount) as TotalAmount

	,DATEDIFF(day,CAST(d.billingDate AS DATE),GETDATE()) as OutstandingDays --,CAST(d.billingDate AS DATE)  --convert(varchar,d.billingDate,23) as billingDate
	from tblWaterMeterReading w
	inner join tblDemand d on w.transactionId = d.transactionId
	inner join mstWaterConnection wc on w.waterConnectionId = wc.waterConnectionId
	where d.isPaymentMade = 0 /**and d.billingDate = 0**/
	and DATEDIFF(day,d.billingDate,CONVERT(varchar,GETDATE(),112)) >=30
	
	group by  wc.consumerNo, wc.waterMeterNo, w.waterConnectionId, w.billingAddress ,CAST(d.billingDate AS DATE)
	order by wc.consumerNo asc,CAST(d.billingDate AS DATE) desc
end
GO
PRINT N'Creating Procedure [dbo].[rptMinorHeadWiseCollectionbycalyear]...';


GO

Create PROCEDURE [dbo].[rptMinorHeadWiseCollectionbycalyear] 
	@calendarYearId int
	
AS
DECLARE @s SMALLDATETIME;


begin


	set nocount on;
	
	Select ROW_NUMBER() over(order by(select 1)) as Sl,
	m.minorHeadName as MinorHeadName
	,sum(de.totalAmount) as TotalAmount
	from mstMinorHead m
    inner join mstDetailHead as d on m.minorHeadId = d.minorHeadId
    inner join mstTaxMaster as t on d.detailHeadId = t.detailHeadId
    inner join tblDemand as de on t.taxId = de.taxId
	where de.isPaymentMade = 1  and de.calendarYearId = @calendarYearId
	 group by m.minorHeadId, m.minorHeadName
			
			

end
GO
PRINT N'Creating Procedure [dbo].[rptMinorHeadWiseCollectionbytofromdate]...';


GO

Create PROCEDURE [dbo].[rptMinorHeadWiseCollectionbytofromdate] 
	@StartDate int, @EndDate int
	
AS
--DECLARE @s SMALLDATETIME, @e SMALLDATETIME;
--set @s=@StartDate

--set @e=@EndDate

begin

	set nocount on;
	 
	Select ROW_NUMBER() over(order by(select 1)) as Sl,
	m.minorHeadName as MinorHeadName
	,sum(de.totalAmount) as TotalAmount
	from mstMinorHead m
    inner join mstDetailHead as d on m.minorHeadId = d.minorHeadId
    inner join mstTaxMaster as t on d.detailHeadId = t.detailHeadId
    inner join tblDemand as de on t.taxId = de.taxId
	where de.isPaymentMade = 1  
	--and l.paymentDate between @s and @e
	and cast(convert(varchar,de.paymentDate,112) as int) >= @StartDate
	
	 and cast(convert(varchar,de.paymentDate,112) as int) <=  @EndDate
	 group by m.minorHeadId, m.minorHeadName
	 
	
end
GO
PRINT N'Creating Procedure [dbo].[rptReconcilingReport]...';


GO

-- =============================================
-- Author: <Author,,Name>
-- Create date: <Create Date,,>
-- Description: <Description,,>
-- =============================================
-- exec [dbo].[rptReconcilingReport] '20210423','20210630'

create PROCEDURE [dbo].[rptReconcilingReport]
@FromDate int, @ToDate int

AS
--DECLARE @s SMALLDATETIME, @e SMALLDATETIME;
--set @s=@StartDate

--set @e=@EndDate

begin

set nocount on;
SELECT  ROW_NUMBER() OVER(
ORDER BY (select 1)) AS Sl,* from(
select 'Cash' as PaymentMode, '-' as PaymentModeNo,'-' as BranchName,'' as PaymentModeDate, sum(amount) as Amount, ps.paymentStatus as PaymentStatus, CONVERT(varchar, d.depositDate,103) as DepositDate, u.FirstName + '' + u.MiddleName + '' + u.LastName as DepositedBy from tblPaymentLeger pl
left join tblDeposit d on pl.paymentLedgerId = d.paymentLedgerId
left join enumPaymentStatus ps on d.paymentStatusId = ps.paymentStatusId
left join AspNetUsers u on d.createdBy = u.userId
where paymentModeId = 1 and
cast(convert(varchar,d.paymentFromDate,112) as int)>=@FromDate and cast(convert(varchar,d.paymentToDate,112) as int)<=@ToDate
group by paymentModeId, ps.paymentStatus, d.depositDate, u.FirstName + '' + u.MiddleName + '' + LastName
union all
select  pm.paymentMode as PaymentMode,pl.paymentModeNo as PaymentModeNo, bb.branchName as BranchName,
convert(varchar,pl.paymentModeDate,103) as PaymentModeDate, amount as Amount, ps.paymentStatus as PaymentStatus ,CONVERT(varchar, d.depositDate,103) as DepositDate, u.FirstName + '' + u.MiddleName + '' + u.LastName as DepositedBy from tblPaymentLeger pl
left join [dbo].[enumPaymentMode] pm on pl.paymentModeId = pm.paymentModeId
left join [dbo].[mstBankBranch] bb on pl.bankBranchId = bb.bankBranchId
left join tblDeposit d on pl.paymentLedgerId = d.paymentLedgerId
left join AspNetUsers u on d.createdBy = u.userId
left join enumPaymentStatus ps on d.paymentStatusId = ps.paymentStatusId

where pl.paymentModeId = 2 and cast(convert(varchar,d.paymentFromDate,112) as int)>=@FromDate and cast(convert(varchar,d.paymentToDate,112) as int)<=@ToDate) t  

end
GO
PRINT N'Update complete.';


GO
