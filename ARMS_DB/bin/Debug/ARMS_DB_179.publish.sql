/*
Deployment script for tt_db

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "tt_db"
:setvar DefaultFilePrefix "tt_db"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstRate_ToTable]...';


GO
ALTER TABLE [dbo].[mstRate] DROP CONSTRAINT [FK_mstRate_ToTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstRate_ToTable_1]...';


GO
ALTER TABLE [dbo].[mstRate] DROP CONSTRAINT [FK_mstRate_ToTable_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstSlab_ToTable]...';


GO
ALTER TABLE [dbo].[mstSlab] DROP CONSTRAINT [FK_mstSlab_ToTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstSlab_ToTable_1]...';


GO
ALTER TABLE [dbo].[mstSlab] DROP CONSTRAINT [FK_mstSlab_ToTable_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstSlab_ToTable_2]...';


GO
ALTER TABLE [dbo].[mstSlab] DROP CONSTRAINT [FK_mstSlab_ToTable_2];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstSlab_ToTable_3]...';


GO
ALTER TABLE [dbo].[mstSlab] DROP CONSTRAINT [FK_mstSlab_ToTable_3];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_mstSlab_ToTable_4]...';


GO
ALTER TABLE [dbo].[mstSlab] DROP CONSTRAINT [FK_mstSlab_ToTable_4];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tblMiscellaneousRecord_ToTable_2]...';


GO
ALTER TABLE [dbo].[tblMiscellaneousRecord] DROP CONSTRAINT [FK_tblMiscellaneousRecord_ToTable_2];


GO
PRINT N'Starting rebuilding table [dbo].[mstRate]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mstRate] (
    [rateId]        INT             IDENTITY (1, 1) NOT NULL,
    [taxId]         INT             NOT NULL,
    [slabId]        INT             NOT NULL,
    [rate]          DECIMAL (18, 2) NOT NULL,
    [minimumRate]   DECIMAL (18, 2) NULL,
    [effectiveDate] DATE            NOT NULL,
    [isActive]      BIT             NOT NULL,
    [createdBy]     INT             NOT NULL,
    [createdOn]     DATETIME        NOT NULL,
    [modifiedBy]    INT             NULL,
    [modifiedOn]    DATETIME        NULL,
    PRIMARY KEY CLUSTERED ([rateId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mstRate])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mstRate] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mstRate] ([rateId], [taxId], [slabId], [rate], [minimumRate], [effectiveDate], [isActive], [createdBy], [createdOn], [modifiedBy], [modifiedOn])
        SELECT   [rateId],
                 [taxId],
                 [slabId],
                 [rate],
                 [minimumRate],
                 [effectiveDate],
                 [isActive],
                 [createdBy],
                 [createdOn],
                 [modifiedBy],
                 [modifiedOn]
        FROM     [dbo].[mstRate]
        ORDER BY [rateId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mstRate] OFF;
    END

DROP TABLE [dbo].[mstRate];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mstRate]', N'mstRate';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[mstSlab]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_mstSlab] (
    [slabId]                INT             IDENTITY (1, 1) NOT NULL,
    [taxId]                 INT             NOT NULL,
    [slabName]              VARCHAR (250)   NOT NULL,
    [landUseSubCategoryId]  INT             NULL,
    [define1]               INT             NULL,
    [define2]               INT             NULL,
    [slabStart]             DECIMAL (18, 2) NULL,
    [slabEnd]               DECIMAL (18, 2) NULL,
    [constructionTypeId]    INT             NULL,
    [buildingUnitUseTypeId] INT             NULL,
    [buildingUnitClassId]   INT             NULL,
    [effectiveDate]         DATE            NULL,
    [isActive]              BIT             NOT NULL,
    [createdOn]             DATETIME        NOT NULL,
    [createdBy]             INT             NOT NULL,
    [modifiedOn]            DATETIME        NULL,
    [modifiedBy]            INT             NULL,
    PRIMARY KEY CLUSTERED ([slabId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[mstSlab])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mstSlab] ON;
        INSERT INTO [dbo].[tmp_ms_xx_mstSlab] ([slabId], [taxId], [slabName], [landUseSubCategoryId], [define1], [define2], [slabStart], [slabEnd], [constructionTypeId], [buildingUnitUseTypeId], [buildingUnitClassId], [effectiveDate], [isActive], [createdOn], [createdBy], [modifiedOn], [modifiedBy])
        SELECT   [slabId],
                 [taxId],
                 [slabName],
                 [landUseSubCategoryId],
                 [define1],
                 [define2],
                 [slabStart],
                 [slabEnd],
                 [constructionTypeId],
                 [buildingUnitUseTypeId],
                 [buildingUnitClassId],
                 [effectiveDate],
                 [isActive],
                 [createdOn],
                 [createdBy],
                 [modifiedOn],
                 [modifiedBy]
        FROM     [dbo].[mstSlab]
        ORDER BY [slabId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_mstSlab] OFF;
    END

DROP TABLE [dbo].[mstSlab];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_mstSlab]', N'mstSlab';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstRate_ToTable]...';


GO
ALTER TABLE [dbo].[mstRate] WITH NOCHECK
    ADD CONSTRAINT [FK_mstRate_ToTable] FOREIGN KEY ([taxId]) REFERENCES [dbo].[mstTaxMaster] ([taxId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstRate_ToTable_1]...';


GO
ALTER TABLE [dbo].[mstRate] WITH NOCHECK
    ADD CONSTRAINT [FK_mstRate_ToTable_1] FOREIGN KEY ([slabId]) REFERENCES [dbo].[mstSlab] ([slabId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstSlab_ToTable]...';


GO
ALTER TABLE [dbo].[mstSlab] WITH NOCHECK
    ADD CONSTRAINT [FK_mstSlab_ToTable] FOREIGN KEY ([taxId]) REFERENCES [dbo].[mstTaxMaster] ([taxId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstSlab_ToTable_1]...';


GO
ALTER TABLE [dbo].[mstSlab] WITH NOCHECK
    ADD CONSTRAINT [FK_mstSlab_ToTable_1] FOREIGN KEY ([buildingUnitUseTypeId]) REFERENCES [dbo].[mstBuildingUnitUseType] ([buildingUnitUseTypeId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstSlab_ToTable_2]...';


GO
ALTER TABLE [dbo].[mstSlab] WITH NOCHECK
    ADD CONSTRAINT [FK_mstSlab_ToTable_2] FOREIGN KEY ([buildingUnitClassId]) REFERENCES [dbo].[mstBuildingUnitClass] ([buildingUnitClassId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstSlab_ToTable_3]...';


GO
ALTER TABLE [dbo].[mstSlab] WITH NOCHECK
    ADD CONSTRAINT [FK_mstSlab_ToTable_3] FOREIGN KEY ([landUseSubCategoryId]) REFERENCES [dbo].[mstLandUseSubCategory] ([landUseSubCategoryId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_mstSlab_ToTable_4]...';


GO
ALTER TABLE [dbo].[mstSlab] WITH NOCHECK
    ADD CONSTRAINT [FK_mstSlab_ToTable_4] FOREIGN KEY ([constructionTypeId]) REFERENCES [dbo].[mstConstructionType] ([constructionTypeId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblMiscellaneousRecord_ToTable_2]...';


GO
ALTER TABLE [dbo].[tblMiscellaneousRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_tblMiscellaneousRecord_ToTable_2] FOREIGN KEY ([slabId]) REFERENCES [dbo].[mstSlab] ([slabId]);


GO
PRINT N'Altering Procedure [dbo].[rptDailyReceiptWiseCollectionByFromDateToDate]...';


GO
-- exec [dbo].[rptDailyReceiptWiseCollectionByFromDateToDate] '20210423','20210424'

-- =============================================
ALTER PROCEDURE [dbo].[rptDailyReceiptWiseCollectionByFromDateToDate]
	-- Add the parameters for the stored procedure here
		 @FromDate  date ,@ToDate  date
AS
BEGIN
SET NOCOUNT ON;


 SELECT  ROW_NUMBER() OVER(
       ORDER BY (select 1)) AS Sl, * from (
(
-- CASH 1
select
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate ,sum(pl.amount) as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl
left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=1 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- CHEQUE 2
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,sum(pl.amount) as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=2 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- Thromde App 3
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,sum(pl.amount) as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=3 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- OnlinePaymentAmount 4
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,sum(pl.amount) as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=4 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)

UNION all
-- PIAmount 5
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,sum(pl.amount) as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=5 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- MBOB 6
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,sum(pl.amount) as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=6 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- mPayAmount 7
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,sum(pl.amount) as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=7 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- DkAmount 8
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,sum(pl.amount) as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=8 and convert(varchar ,pl.createdOn,112)>=@FromDate and convert(varchar ,pl.createdOn,112)<=@ToDate
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- TPayAmount 9
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,sum(pl.amount) as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=9 and convert(varchar ,pl.createdOn,112)>=convert(varchar ,@FromDate,112)  and convert(varchar ,pl.createdOn,112)<=convert(varchar ,@ToDate,112)
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)

UNION all
-- DrukPNBAmount 10
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,sum(pl.amount) as DrukPNBAmount,0 as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=10 and convert(varchar ,pl.createdOn,112)>=convert(varchar ,@FromDate,112)  and convert(varchar ,pl.createdOn,112)<=convert(varchar ,@ToDate,112)
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- ePayAmount 11
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,sum(pl.amount) as ePayAmount,0 as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=11 and convert(varchar ,pl.createdOn,112)>=convert(varchar ,@FromDate,112)  and convert(varchar ,pl.createdOn,112)<=convert(varchar ,@ToDate,112)
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)
UNION all
-- eTeeruAmount 12
(
select
--convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate,
r.receiptNo AS ReceiptNo, isnull(pl.paymentModeNo,'-') as PaymentModeNo ,isnull(convert(varchar ,pl.paymentModeDate,103),'') as PaymentModeDate,
convert(varchar ,pl.createdOn,103) as PaymentDate, 0 as CashAmount,0 as ChecqueAmount,0 as ThromdeApp,0 as OnlinePaymentAmount
,0 as PIAmount,0 as MBOBAmount,0 as mPayAmount,0 as DkAmount,0 as TPayAmount,0 as DrukPNBAmount,0 as ePayAmount,sum(pl.amount) as eTeeruAmount
,convert(varchar ,@FromDate,103) as FromDate,convert(varchar ,@ToDate,103) as ToDate
from [dbo].tblPaymentLeger pl

left join [dbo].[tblReceipt] r on pl.receiptId= r.receiptId
where pl.paymentModeId=12 and convert(varchar ,pl.createdOn,112)>=convert(varchar ,@FromDate,112)  and convert(varchar ,pl.createdOn,112)<=convert(varchar ,@ToDate,112)
group by convert(varchar ,pl.createdOn,103),r.receiptNo,pl.paymentModeNo,pl.paymentModeDate
)) gg
order by ReceiptNo
END
GO
PRINT N'Creating Procedure [dbo].[rptFloorWiseCountReport]...';


GO


-- =============================================
-- Author: <Author,,Name>
-- Create date: <Create Date,,>
-- Description: <Description,,>
-- ============================================
-- exec [dbo].[rptFloorWiseCountReport]

create PROCEDURE [dbo].[rptFloorWiseCountReport]

AS

begin

set nocount on;

SELECT  ROW_NUMBER() OVER(
ORDER BY (select 1)) AS Sl,* from(

select bd.numberOfFloors as NumberOfFloors,count(*) as BuildingCount
from mstBuildingDetail bd
group by bd.numberOfFloors

)gg
end
GO
PRINT N'Creating Procedure [dbo].[rptMissedOutReadingReport]...';


GO
-- exec [dbo].[rptMissedOutReadingReport] '2021-04-01'

create PROCEDURE [dbo].[rptMissedOutReadingReport]
 @ReadingMonth date

AS
begin
set nocount on;

SELECT  ROW_NUMBER() OVER(
ORDER BY (select 1)) AS Sl,* from(
select 
wc.consumerNo as ConsumerNo,wc.waterMeterNo as MeterNo,wc.connectionDate as connectionDate,wmr.isActive as ActiveStatus,wl.waterLineType as LineType,
wct.waterConnectionType as ConnectionType,wcs.waterConnectionStatus as ConnectionStatus,wmr.flatNo as FlatNo,wmr.billingAddress as BillingAddress
from tblWaterMeterReading wmr
inner join mstWaterConnection wc on wmr.waterConnectionId = wc.waterConnectionId
inner join mstWaterLineType wl on wmr.waterLineTypeId = wl.waterLineTypeId
inner join mstWaterConnectionType wct on wmr.waterConnectionTypeId = wct.waterConnectionTypeId 
inner join enumWaterConnectionStatus wcs on wmr.waterConnectionStatusId = wcs.waterConnectionStatusId
where wmr.isRead = 0 
--and 
--wmr.transactionId is null and Format(wmr.readingDate,'yyyyMM')+'01' = Format(DATEADD(month, -1, @ReadingMonth),'yyyyMM')+'01' 
) gg
end
GO
PRINT N'Refreshing Procedure [dbo].[rptGetTaxRates]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[rptGetTaxRates]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[mstRate] WITH CHECK CHECK CONSTRAINT [FK_mstRate_ToTable];

ALTER TABLE [dbo].[mstRate] WITH CHECK CHECK CONSTRAINT [FK_mstRate_ToTable_1];

ALTER TABLE [dbo].[mstSlab] WITH CHECK CHECK CONSTRAINT [FK_mstSlab_ToTable];

ALTER TABLE [dbo].[mstSlab] WITH CHECK CHECK CONSTRAINT [FK_mstSlab_ToTable_1];

ALTER TABLE [dbo].[mstSlab] WITH CHECK CHECK CONSTRAINT [FK_mstSlab_ToTable_2];

ALTER TABLE [dbo].[mstSlab] WITH CHECK CHECK CONSTRAINT [FK_mstSlab_ToTable_3];

ALTER TABLE [dbo].[mstSlab] WITH CHECK CHECK CONSTRAINT [FK_mstSlab_ToTable_4];

ALTER TABLE [dbo].[tblMiscellaneousRecord] WITH CHECK CHECK CONSTRAINT [FK_tblMiscellaneousRecord_ToTable_2];


GO
PRINT N'Update complete.';


GO
